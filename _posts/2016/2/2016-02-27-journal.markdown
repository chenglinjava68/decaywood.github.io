---
layout:     post
random-img: true
title:      烫手山芋以及如何应对甲方频繁的变更需求
subtitle:   "Legacy Project & The key to face the frequently requirements change"
date:       2016-02-27 21:36:52
author:     decaywood
description: 关于如何应对甲方频繁的变更需求的一些总结
keywords: 总结,重构,架构,需求变更
tags:
    - 总结
    - 架构
---

空管局那边差不多没什么事了，然而这学期刚开始，假期综合症还没缓下来，实验室师兄的遗留项目被由我负责的小队接下来了,说实话真心有点郁闷。

这个项目以前跟师兄交流过,无非是前端定时从后台定时get一些地图数据展示罢了，没什么难的，技术栈相当简单：前端使用d3配合百度ECharts进行展示，后台使用Tornado进行异步处理请求，数据库暂定MySQL。唯有一点让我左右为难，甲方无止境的需求变更。。。当然，这是大师兄说的，本开始他们几个人配合得挺好的，但由于需求变更太频繁，且没有足够详细的文档以及测试数据，其开发进度以及团队配合的默契渐渐打散，我接手时，代码已经像一把咸菜一样混乱。

主要几个问题如下：

* 后台通信接口混乱 ajax、websocket交织在一起
* 耦合极高，需求已经达到无法更改的程度
* 未模块化，一个函数实现了所有功能，要看懂功能极其困难
* 甲方需求不明确，变更频繁

经过几天思考后，我打算好好整理一下已有的文档，并想想如何应对这种情况。目前团队的情况是除我之外的其余4个同学掌握较为基本的js知识，其中一个熟悉c语言，两个熟悉Java。后台遗留代码是用Python写的，我过了一遍，结构还算清晰，只是没按官方文档的推荐用法来，稍微重构一下就行了，于是我打算全揽了后台的工作。而前端问题就有点棘手了，照现在的代码来看，只能推翻重来，不过一些已经实现的并已经测试的功能可以尽量剥离出来用于以后的复用。故前端任务是最重的，小组四人加上我都得介入开发。

目前计划如下：

* 前端展示层尽可能地提取出可配置属性
* 前端功能尽量模块化，函数尽可能基础化，复杂功能由基础函数进行组合
* 前端数据更新统一为ajax定时轮询机制，调用接口统一
* 后台在遗留代码基础上进行重构，按官方规范进行编写
* 使用git进行版本控制，代码托管到oschina

好处：第一条以及第二条计划主要是为了应对频繁的需求更改，需求更改后，基础函数可以不用修改,如果只是改改颜色,速度等一些展示方面的属性,配置一下参数就行了。其次配合第五条计划可以高效利用有限的人力，各模块同时跟进。第三条计划是为了降低不必要的复杂度，轮询机制已经能够很好的满足要求了就没必要将代码复杂化。第四条计划为的是杜绝新增功能时的调试成本，虽然后台代码暂时没什么问题，但总归是一个定时炸弹。如果出现什么问题都不好debug，尤其是对Tornado不是很熟悉的时候，按照官方推荐用法来比较好。再者由于采用轮询方式更新数据，服务器不再需要主动推送数据了，维护一个全局变量似乎没有什么意义。

后记： 暂时先想了这么多，可能考虑的还不够周全，到时候依场景再做改动吧。

持续更新...

